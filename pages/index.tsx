import React from 'react'
import Head from 'next/head'
import Image from 'next/image'
import Board from '../components/Board'
import Square from '../components/Square'
import { Turn, Game, RSquare, Position } from 'types'

const GIRDSIZE = 3
export default function Home() {
  const X: Turn = {
    title: 'x',
    value: 1
  }
  const O: Turn = {
    title: 'o',
    value: -1
  }
  const [game, setGame] = React.useState<Game>({
    score: Array(2 * GIRDSIZE + 2).fill(0),
    turn: X,
    winner: null,
    status: '',
    step: GIRDSIZE ** 2
  })
  const [clear, setClear] = React.useState<boolean>(false)

  const handleMove = (result: RSquare) => {
    // update Game
    const newResult = handleUpdate(game.score, result.turn, result.pos)
    // determine winner & step left
    const gameState = handleWinner(newResult)
    const winnerCond = gameState && typeof (gameState) !== 'string' ?
      gameState
      : null
    // switch turn
    const nextTurn = handleTurn(result.turn.title)
    // render
    setGame(prev => ({
      ...prev,
      score: newResult,
      turn: nextTurn,
      winner: winnerCond
    }))
  }
  const handleUpdate = (curArr: number[], turn: Turn, pos: Position) => {
    let newArr = [...curArr];
    // process turn
    newArr[pos.row] += turn.value
    newArr[GIRDSIZE + pos.col] += turn.value
    if (pos.row == pos.col) newArr[2 * GIRDSIZE] += turn.value
    if (GIRDSIZE - 1 - pos.col == pos.row) newArr[2 * GIRDSIZE + 1] += turn.value
    return newArr
  }
  const handleWinner = (newResult: number[]) => {
    let winner = null
    const newStep = game.step - 1
    if (!newStep) {
      setGame(prev => ({
        ...prev,
        status: 'draw'
      }))
      return 'draw'
    }
    const result = newResult.find((arr) => {
      if (arr == GIRDSIZE) {
        winner = X
        return true
      }
      if (arr == -GIRDSIZE) {
        winner = O
        return true
      }
    })
    setGame(prev => ({
      ...prev,
      step: newStep,
      status: result ? 'end' : 'in progress'
    }))
    return winner
  }
  const handleTurn = (currentTurn: string) => {
    return currentTurn == 'x' ? O : X
  }
  const handleClear = () => {
    setGame({
      score: Array(2 * GIRDSIZE + 2).fill(0),
      turn: X,
      winner: null,
      step: GIRDSIZE ** 2,
      status: '',
    })
    setClear(true)
    setTimeout(() => {
      setClear(false)
    }, 500)
  }

  return (
    <div className=''>
      <Head>
        <title>TicTacToe</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='flex flex-col flex-1 h-screen justify-center items-center text-center'>
        <div className='mb-4'>Winner: {game?.winner?.title}</div>
        <div className='mb-4'>Turn: {game?.turn?.title}</div>
        <div className='mb-4'>Status: {game?.status}</div>
        <Board
          className={`grid grid-cols-${GIRDSIZE}`}
        >
          {[...Array(GIRDSIZE)].map((r, row) => (
            <div key={`row-${row}`} className={`grid grid-rows-${GIRDSIZE} gap-2 justify-center items-center`}>
              {[...Array(GIRDSIZE)].map((c, col) => (
                <Square clear={clear} key={`col-${col}`} pos={{ row: row, col: col }} turn={game.turn} onClick={handleMove} />
              ))}
            </div>
          ))}
        </Board>
        <div className='mt-4 p-2 cursor-pointer hover:bg-white hover:text-black border-2 rounded-lg border-white'
          onClick={handleClear}
        >
          Clear Game
        </div>

      </main>

      <footer className=''>
      </footer>
    </div>
  )
}
